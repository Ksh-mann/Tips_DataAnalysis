# -*- coding: utf-8 -*-
"""Py_DataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ae2FWWfB21nDWA5oj1glVqkHbQ_Cfp1G
"""

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import io

from google.colab import files
uploaded = files.upload()

df = pd.read_csv(io.BytesIO(uploaded['tips.csv']))
print(df)

df.head()

df.describe()

"""# **Common Data Visualizations**"""

#Visualization 1: Scatterplot
sns.lmplot(x='total_bill', y='tip', data=df, hue='sex', palette='coolwarm')
plt.xlabel('Total Bill')
plt.ylabel('Tip')
plt.title('Scatterplot with Regression Line')
plt.show()

# Visualization 2: Histogram
plt.hist(df['total_bill'], bins=20, color='skyblue')
plt.xlabel('Total Bill')
plt.ylabel('Frequency')
plt.title('Histogram of Total Bill')
plt.show()

#Visualization 3: Boxplot (Tip x Day)
sns.boxplot(x='day', y='tip', data=df, palette='pastel')
plt.xlabel('Day')
plt.ylabel('Tip')
plt.title('Boxplot of Tip by Day')
plt.show()

#Visualization 4: Bar Plot
average_tip_by_day = df.groupby('day')['tip'].mean().reset_index()
sns.barplot(x='day', y='tip', data=average_tip_by_day, palette='pastel')
plt.xlabel('Day')
plt.ylabel('Average Tip')
plt.title('Bar Plot of Average Tip by Day')
plt.show()

# Visualization 5: Heatmap of Correlation
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', square=True)
plt.title('Heatmap of Correlation')
plt.show()

"""# **Feature Implementation**"""

# Feature 1: Tip Percentage
df['tip_percentage'] = (df['tip'] / df['total_bill']) * 100

# Feature 2: Total Bill Per Person
df['total_bill_per_person'] = df['total_bill'] / (df['size'])

# Display updated dataset with added features
print(df.head())

"""# **Predictive Analysis using Linear Regression**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Preprocessing: Convert categorical variables into numerical form
pdf = pd.get_dummies(df, columns=['sex', 'smoker', 'day', 'time'])

# Split the data into features (X) and target variable (y)
X = pdf.drop('tip', axis=1)
y = pdf['tip']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

pdf.head()

#Building the Predictive Model
model = LinearRegression()

# Train the model using the training data
model.fit(X_train, y_train)

# Predict tip amount using the test data
y_pred = model.predict(X_test)

# Calculate the mean squared error and R-squared score to evaluate performance of model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared Score: {r2:.2f}')